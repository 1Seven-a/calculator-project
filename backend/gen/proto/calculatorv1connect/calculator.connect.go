// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/calculator.proto

package calculatorv1connect

import (
	proto "calculator/gen/proto"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CalculatorServiceName is the fully-qualified name of the CalculatorService service.
	CalculatorServiceName = "calculator.v1.CalculatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CalculatorServiceAddProcedure is the fully-qualified name of the CalculatorService's Add RPC.
	CalculatorServiceAddProcedure = "/calculator.v1.CalculatorService/Add"
	// CalculatorServiceSubtractProcedure is the fully-qualified name of the CalculatorService's
	// Subtract RPC.
	CalculatorServiceSubtractProcedure = "/calculator.v1.CalculatorService/Subtract"
	// CalculatorServiceMultiplyProcedure is the fully-qualified name of the CalculatorService's
	// Multiply RPC.
	CalculatorServiceMultiplyProcedure = "/calculator.v1.CalculatorService/Multiply"
	// CalculatorServiceDivideProcedure is the fully-qualified name of the CalculatorService's Divide
	// RPC.
	CalculatorServiceDivideProcedure = "/calculator.v1.CalculatorService/Divide"
)

// CalculatorServiceClient is a client for the calculator.v1.CalculatorService service.
type CalculatorServiceClient interface {
	// 加法操作
	Add(context.Context, *connect_go.Request[proto.AddRequest]) (*connect_go.Response[proto.CalculateResponse], error)
	// 减法操作
	Subtract(context.Context, *connect_go.Request[proto.SubtractRequest]) (*connect_go.Response[proto.CalculateResponse], error)
	// 乘法操作
	Multiply(context.Context, *connect_go.Request[proto.MultiplyRequest]) (*connect_go.Response[proto.CalculateResponse], error)
	// 除法操作
	Divide(context.Context, *connect_go.Request[proto.DivideRequest]) (*connect_go.Response[proto.CalculateResponse], error)
}

// NewCalculatorServiceClient constructs a client for the calculator.v1.CalculatorService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalculatorServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CalculatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &calculatorServiceClient{
		add: connect_go.NewClient[proto.AddRequest, proto.CalculateResponse](
			httpClient,
			baseURL+CalculatorServiceAddProcedure,
			opts...,
		),
		subtract: connect_go.NewClient[proto.SubtractRequest, proto.CalculateResponse](
			httpClient,
			baseURL+CalculatorServiceSubtractProcedure,
			opts...,
		),
		multiply: connect_go.NewClient[proto.MultiplyRequest, proto.CalculateResponse](
			httpClient,
			baseURL+CalculatorServiceMultiplyProcedure,
			opts...,
		),
		divide: connect_go.NewClient[proto.DivideRequest, proto.CalculateResponse](
			httpClient,
			baseURL+CalculatorServiceDivideProcedure,
			opts...,
		),
	}
}

// calculatorServiceClient implements CalculatorServiceClient.
type calculatorServiceClient struct {
	add      *connect_go.Client[proto.AddRequest, proto.CalculateResponse]
	subtract *connect_go.Client[proto.SubtractRequest, proto.CalculateResponse]
	multiply *connect_go.Client[proto.MultiplyRequest, proto.CalculateResponse]
	divide   *connect_go.Client[proto.DivideRequest, proto.CalculateResponse]
}

// Add calls calculator.v1.CalculatorService.Add.
func (c *calculatorServiceClient) Add(ctx context.Context, req *connect_go.Request[proto.AddRequest]) (*connect_go.Response[proto.CalculateResponse], error) {
	return c.add.CallUnary(ctx, req)
}

// Subtract calls calculator.v1.CalculatorService.Subtract.
func (c *calculatorServiceClient) Subtract(ctx context.Context, req *connect_go.Request[proto.SubtractRequest]) (*connect_go.Response[proto.CalculateResponse], error) {
	return c.subtract.CallUnary(ctx, req)
}

// Multiply calls calculator.v1.CalculatorService.Multiply.
func (c *calculatorServiceClient) Multiply(ctx context.Context, req *connect_go.Request[proto.MultiplyRequest]) (*connect_go.Response[proto.CalculateResponse], error) {
	return c.multiply.CallUnary(ctx, req)
}

// Divide calls calculator.v1.CalculatorService.Divide.
func (c *calculatorServiceClient) Divide(ctx context.Context, req *connect_go.Request[proto.DivideRequest]) (*connect_go.Response[proto.CalculateResponse], error) {
	return c.divide.CallUnary(ctx, req)
}

// CalculatorServiceHandler is an implementation of the calculator.v1.CalculatorService service.
type CalculatorServiceHandler interface {
	// 加法操作
	Add(context.Context, *connect_go.Request[proto.AddRequest]) (*connect_go.Response[proto.CalculateResponse], error)
	// 减法操作
	Subtract(context.Context, *connect_go.Request[proto.SubtractRequest]) (*connect_go.Response[proto.CalculateResponse], error)
	// 乘法操作
	Multiply(context.Context, *connect_go.Request[proto.MultiplyRequest]) (*connect_go.Response[proto.CalculateResponse], error)
	// 除法操作
	Divide(context.Context, *connect_go.Request[proto.DivideRequest]) (*connect_go.Response[proto.CalculateResponse], error)
}

// NewCalculatorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalculatorServiceHandler(svc CalculatorServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	calculatorServiceAddHandler := connect_go.NewUnaryHandler(
		CalculatorServiceAddProcedure,
		svc.Add,
		opts...,
	)
	calculatorServiceSubtractHandler := connect_go.NewUnaryHandler(
		CalculatorServiceSubtractProcedure,
		svc.Subtract,
		opts...,
	)
	calculatorServiceMultiplyHandler := connect_go.NewUnaryHandler(
		CalculatorServiceMultiplyProcedure,
		svc.Multiply,
		opts...,
	)
	calculatorServiceDivideHandler := connect_go.NewUnaryHandler(
		CalculatorServiceDivideProcedure,
		svc.Divide,
		opts...,
	)
	return "/calculator.v1.CalculatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CalculatorServiceAddProcedure:
			calculatorServiceAddHandler.ServeHTTP(w, r)
		case CalculatorServiceSubtractProcedure:
			calculatorServiceSubtractHandler.ServeHTTP(w, r)
		case CalculatorServiceMultiplyProcedure:
			calculatorServiceMultiplyHandler.ServeHTTP(w, r)
		case CalculatorServiceDivideProcedure:
			calculatorServiceDivideHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCalculatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCalculatorServiceHandler struct{}

func (UnimplementedCalculatorServiceHandler) Add(context.Context, *connect_go.Request[proto.AddRequest]) (*connect_go.Response[proto.CalculateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("calculator.v1.CalculatorService.Add is not implemented"))
}

func (UnimplementedCalculatorServiceHandler) Subtract(context.Context, *connect_go.Request[proto.SubtractRequest]) (*connect_go.Response[proto.CalculateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("calculator.v1.CalculatorService.Subtract is not implemented"))
}

func (UnimplementedCalculatorServiceHandler) Multiply(context.Context, *connect_go.Request[proto.MultiplyRequest]) (*connect_go.Response[proto.CalculateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("calculator.v1.CalculatorService.Multiply is not implemented"))
}

func (UnimplementedCalculatorServiceHandler) Divide(context.Context, *connect_go.Request[proto.DivideRequest]) (*connect_go.Response[proto.CalculateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("calculator.v1.CalculatorService.Divide is not implemented"))
}
